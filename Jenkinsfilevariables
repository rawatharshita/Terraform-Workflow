# Each environment has its own .tf, .tfvars and tfstate file

pipeline {
    agent any

   parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'UAT', 'Prod'], description: 'Select the environment to deploy')
    }
}


    stages {
        stage('Checkout') {
            steps {
                // Checkout your Git repository
                checkout scm
            }
        }

      stage("Init ${ENVIRONMENT}") {
                        steps {
                            script {
                                def workspaceDir = "Terraform/Environments/${ENVIRONMENT}"
                                dir(workspaceDir) {
                                    echo "Terraform for ${ENVIRONMENT}"
                                    sh 'terraform init'
                                    sh ' terraform fmt '
                                    sh 'terraform validate'
                                    sh 'terraform plan -out=tfplan.txt -var-file=terraform.tfvars' 
                        
                                }
                            }
                        }
                    }
                }   

  stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?",
                        parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

   
                  stage("Apply ${ENVIRONMENT}") {
                        when {
                            expression { currentBuild.currentResultIsBetterOrEqualTo('SUCCESS') }
                        }
                        steps {
                            script {
                                def workspaceDir = "${WORKSPACE}/${ENVIRONMENT}"
                                dir(workspaceDir) {
                                    echo "Applying Terraform for ${ENVIRONMENT}"
                                    sh 'terraform init'
                                    sh "terraform apply -auto-approve -var-file=${ENVIRONMENT}/terraform.tfvars"
                                }
                            }
                        }
                    }
                }   

      post {
        success {
            // Perform cleanup or additional steps upon successful execution
        }
        failure {
            // Handle failure scenarios if needed
        }
    }

    
